!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
Effect	bespeckle.h	/^class Effect {$/;"	c
HSVA	bespeckle.h	/^class HSVA {$/;"	c
HSVA_A_MASK	bespeckle.h	/^#define HSVA_A_MASK /;"	d
HSVA_A_SHIFT	bespeckle.h	/^#define HSVA_A_SHIFT /;"	d
HSVA_H_MASK	bespeckle.h	/^#define HSVA_H_MASK /;"	d
HSVA_H_SHIFT	bespeckle.h	/^#define HSVA_H_SHIFT /;"	d
HSVA_S_MASK	bespeckle.h	/^#define HSVA_S_MASK /;"	d
HSVA_S_SHIFT	bespeckle.h	/^#define HSVA_S_SHIFT /;"	d
HSVA_V_MASK	bespeckle.h	/^#define HSVA_V_MASK /;"	d
HSVA_V_SHIFT	bespeckle.h	/^#define HSVA_V_SHIFT /;"	d
RGBA	bespeckle.h	/^class RGBA {$/;"	c
RGBA_B_MASK	bespeckle.h	/^#define RGBA_B_MASK /;"	d
RGBA_B_SHIFT	bespeckle.h	/^#define RGBA_B_SHIFT /;"	d
RGBA_G_MASK	bespeckle.h	/^#define RGBA_G_MASK /;"	d
RGBA_G_SHIFT	bespeckle.h	/^#define RGBA_G_SHIFT /;"	d
RGBA_R_MASK	bespeckle.h	/^#define RGBA_R_MASK /;"	d
RGBA_R_SHIFT	bespeckle.h	/^#define RGBA_R_SHIFT /;"	d
STRIP_LENGTH	bespeckle.h	/^#define STRIP_LENGTH /;"	d
TICK_LENGTH	bespeckle.h	/^#define TICK_LENGTH /;"	d
_	bespeckle.cpp	/^struct _{ operator char() { return N+ 256; } }; \/\/always overflow$/;"	s	file:
a	bespeckle.h	/^		uint8_t a;$/;"	m	class:HSVA
a	bespeckle.h	/^		uint8_t a;$/;"	m	class:RGBA
b	bespeckle.h	/^		uint8_t b;$/;"	m	class:RGBA
fractick_t	bespeckle.h	/^typedef uint8_t fractick_t; \/\/ sizeof(fractick_t) > TICK_LENGTH$/;"	t
g	bespeckle.h	/^		uint8_t g;$/;"	m	class:RGBA
h	bespeckle.h	/^		uint8_t h;$/;"	m	class:HSVA
hsva_t	bespeckle.h	/^typedef uint16_t hsva_t;$/;"	t
main	bespeckle.cpp	/^int main(){$/;"	f
next	bespeckle.h	/^		Effect* next;$/;"	m	class:Effect
operator char	bespeckle.cpp	/^struct _{ operator char() { return N+ 256; } }; \/\/always overflow$/;"	f	struct:_
pixel_rgba	bespeckle.cpp	/^RGBA Effect::pixel_rgba(position_t pos){$/;"	f	class:Effect
position_t	bespeckle.h	/^typedef uint8_t position_t; \/\/ sizeof(position_t) > STRIP_LENGTH$/;"	t
r	bespeckle.h	/^		uint8_t r;$/;"	m	class:RGBA
rgb_t	bespeckle.h	/^typedef uint16_t rgb_t;$/;"	t
s	bespeckle.h	/^		uint8_t s;$/;"	m	class:HSVA
toRGBA	bespeckle.cpp	/^RGBA HSVA::toRGBA(void){$/;"	f	class:HSVA
unpack	bespeckle.cpp	/^void HSVA::unpack(hsva_t packed){$/;"	f	class:HSVA
unpack	bespeckle.cpp	/^void RGBA::unpack(rgb_t packed){$/;"	f	class:RGBA
v	bespeckle.h	/^		uint8_t v;$/;"	m	class:HSVA
